(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-64ae359e"],{4300:function(e,n,t){"use strict";t.r(n);var o=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("article",[t("p",[e._v("class 写法让对象原型的写法更加清晰、更像面向对象编程的语法。")]),t("div",{staticClass:"flex"},[t("pre",[t("code",[e._v(e._s(e.codeLeft))])]),t("pre",[t("code",[e._v(e._s(e.codeRight))])])]),t("p",[e._v("ES5 的构造函数 Person，对应 ES6 的 Person 类的 constructor 方法。")]),t("p",[e._v("值得注意的是：类的内部所有定义的方法，都是不可枚举的（non-enumerable）")]),t("div",{staticClass:"flex"},[t("pre",[t("code",[e._v(e._s(e.codeLeft2))])]),t("pre",[t("code",[e._v(e._s(e.codeRight2))])])]),t("h2",[e._v("摘抄自（文章将es6和es5对比地很清楚）")]),e._m(0)])},s=[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000016914693"}},[e._v("ES6 系列之 Babel 是如何编译 Class 的(上)")])])}],r={name:"jsClass",data:function(){return{createTime:"2019-03-07 11:18:00",codeLeft:"// ES6 中：\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n  sayHello() {\n    return 'hello, I am ' + this.name;\n  }\n}\nvar kevin = new Person('Kevin');\nkevin.sayHello(); // hello, I am Kevin",codeRight:"// 对应到 ES5 中就是:\nfunction Person(name) {\n  this.name = name;\n}\nPerson.prototype.sayHello = function () {\n  return 'hello, I am ' + this.name;\n};\nvar kevin = new Person('Kevin');\nkevin.sayHello(); // hello, I am Kevin",codeLeft2:'// 在 ES6 中：\nObject.keys(Person.prototype); // []\nObject.getOwnPropertyNames(Person.prototype); // ["constructor", "sayHello"]',codeRight2:'// 在 ES5 中：\nObject.keys(Person.prototype); // [\'sayHello\']\nObject.getOwnPropertyNames(Person.prototype); // ["constructor", "sayHello"]'}},components:{},mounted:function(){},computed:{},methods:{}},a=r,c=(t("48aa"),t("2877")),l=Object(c["a"])(a,o,s,!1,null,"2367b8ec",null);n["default"]=l.exports},"48aa":function(e,n,t){"use strict";var o=t("8d21"),s=t.n(o);s.a},"8d21":function(e,n,t){}}]);